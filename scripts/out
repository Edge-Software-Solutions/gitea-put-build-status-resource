#!/bin/bash
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

TMPDIR=${TMPDIR:-/tmp}

source "$(dirname "$0")/common.sh"

destination="$1"

if [ -z "${destination}" ]; then
    echo "Usage: $0 <path/to/destination>" >&2
    exit 1
fi

payload="$(mktemp "${TMPDIR}/gitea-pull-request-resource.XXXXXX")"

cat > "${payload}" <&0

configure_ssl_verification "${payload}"

uri="$(jq -r '.source.uri // ""' < "${payload}")"
private_token="$(jq -r '.source.private_token // ""' < "${payload}")"
private_key="$(jq -r '.source.private_key // ""' < "${payload}")"
no_ssl="$(jq -r '.source.no_ssl // ""' < "${payload}")"
params="$(jq -r '.params // ""' < "${payload}")"
path_to_repo="$(echo "${params}" | jq -r '.repository // ""')"
new_status="$(echo "${params}" | jq -r '.status // ""')"
description="$(echo "${params}" | jq -r '.description // ""')"
build_label="$(echo "${params}" | jq -r '.build_label // "Concourse"')"
current_multibranch="$(jq -r '.source.current_multibranch // ""' < "${payload}")"

if [ -z "${path_to_repo}" ]; then
    echo "please specify a repository" >&2
    exit 1
fi
if [ -z "${new_status}" ]; then
    echo "please specify a status" >&2
    exit 1
fi
echo "Received Payload:"
jq < "${payload}"

gitea_host=''
project_path=''
protocol='https'
if [[ ! -z "${private_key}" ]]; then
    gitea_host="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\1/p')"
    port="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\2/p')"
    port=${port///} # remove trailing slash
    project_path="$(echo "${uri}" | sed -rn 's/.*git@(.*):([0-9]*\/+)?(.*)\.git/\3/p')"
else
    gitea_host="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\2/p')"
    project_path="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\3/p')"
    protocol="$(echo "${uri}" | sed -rn 's/(https?):\/\/([^\/]*)\/(.*)\.git/\1/p')"
fi
if [ "${no_ssl}" == 'true' ]; then
    protocol='http'
fi



cd "${destination}"
cd "${path_to_repo}"

commit_sha="$(git rev-parse HEAD)"
index=$(git show-ref | grep 'refs/pull/' | grep ${commit_sha} | sed 's/.*refs\/pull\/\(.*\)\/.*/\1/')
branch="$(git rev-parse --abbrev-ref HEAD)"

target_url="${ATC_EXTERNAL_URL}/teams/$(urlencode "${BUILD_TEAM_NAME}")/pipelines/$(urlencode "${BUILD_PIPELINE_NAME}")/jobs/$(urlencode "${BUILD_JOB_NAME}")/builds/$(urlencode "${BUILD_NAME}")"

if [[ -n "${current_multibranch}" ]]; then
    target_url="${target_url}?vars.branch=$(urlencode \""${current_multibranch}"\")"
fi
if [[ -z "${description}" ]]; then
    description="Concourse Job - ${BUILD_JOB_NAME} #${BUILD_NAME}"
fi

echo "Making a request to gitea to update the build status"
echo curl \
    --request POST \
    --header "Authorization: token ${private_token}" \
    --header 'Content-Type: application/json' \
    --data "{\"state\":\"${new_status}\",\"description\":\"${description}\",\"context\":\"${build_label}\",\"target_url\":\"${target_url}\"}" \
    "${protocol}://${gitea_host}/api/v1/repos/${project_path}/statuses/${commit_sha}"
curl \
    -s \
    --request POST \
    --header "Authorization: token ${private_token}" \
    --header 'Content-Type: application/json' \
    --data "{\"state\":\"${new_status}\",\"description\":\"${description}\",\"context\":\"${build_label}\",\"target_url\":\"${target_url}\"}" \
    "${protocol}://${gitea_host}/api/v1/repos/${project_path}/statuses/${commit_sha}" > /dev/null
version="{\"ref\":\"${commit_sha}:${branch}:${index}\"}"

jq -n "{
    version: ${version},
    metadata: $(git_metadata)
}" >&3
